<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://blog912.cn/index.xml</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 29 Mar 2017 22:42:54 +0530</lastBuildDate>
    <atom:link href="http://blog912.cn/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>golang在windows下读取clipboard截取图片信息</title>
      <link>http://blog912.cn/golang%E5%9C%A8windows%E4%B8%8B%E8%AF%BB%E5%8F%96clipboard%E6%88%AA%E5%B1%8F%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Wed, 29 Mar 2017 22:42:54 +0530</pubDate>
      
      <guid>http://blog912.cn/golang%E5%9C%A8windows%E4%B8%8B%E8%AF%BB%E5%8F%96clipboard%E6%88%AA%E5%B1%8F%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package clipboard

import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;encoding/binary&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;syscall&amp;quot;
    &amp;quot;unsafe&amp;quot;
    // &amp;quot;bufio&amp;quot;
    &amp;quot;golang.org/x/image/bmp&amp;quot;
    &amp;quot;image/jpeg&amp;quot;
    // &amp;quot;github.com/anthonynsimon/bild/imgio&amp;quot;
)

const (
    cfBitmap      = 2
    cfDib         = 8
    cfUnicodetext = 13
    cfDibV5       = 17
    gmemFixed     = 0x0000
)

type fileHeader struct {
    bfType      uint16
    bfSize      uint32
    bfReserved1 uint16
    bfReserved2 uint16
    bfOffBits   uint32
}

type infoHeader struct {
    iSize          uint32
    iWidth         uint32
    iHeight        uint32
    iPLanes        uint16
    iBitCount      uint16
    iCompression   uint32
    iSizeImage     uint32
    iXPelsPerMeter uint32
    iYPelsPerMeter uint32
    iClrUsed       uint32
    iClrImportant  uint32
}

var (
    user32                     = syscall.MustLoadDLL(&amp;quot;user32&amp;quot;)
    openClipboard              = user32.MustFindProc(&amp;quot;OpenClipboard&amp;quot;)
    closeClipboard             = user32.MustFindProc(&amp;quot;CloseClipboard&amp;quot;)
    emptyClipboard             = user32.MustFindProc(&amp;quot;EmptyClipboard&amp;quot;)
    getClipboardData           = user32.MustFindProc(&amp;quot;GetClipboardData&amp;quot;)
    setClipboardData           = user32.MustFindProc(&amp;quot;SetClipboardData&amp;quot;)
    isClipboardFormatAvailable = user32.MustFindProc(&amp;quot;IsClipboardFormatAvailable&amp;quot;)

    kernel32     = syscall.NewLazyDLL(&amp;quot;kernel32&amp;quot;)
    globalAlloc  = kernel32.NewProc(&amp;quot;GlobalAlloc&amp;quot;)
    globalFree   = kernel32.NewProc(&amp;quot;GlobalFree&amp;quot;)
    globalLock   = kernel32.NewProc(&amp;quot;GlobalLock&amp;quot;)
    globalUnlock = kernel32.NewProc(&amp;quot;GlobalUnlock&amp;quot;)
    lstrcpy      = kernel32.NewProc(&amp;quot;lstrcpyW&amp;quot;)
    copyMemory   = kernel32.NewProc(&amp;quot;CopyMemory&amp;quot;)
)

func copyInfoHdr(dst *byte, psrc *infoHeader) (string, error) {

    pdst := (*infoHeader)(unsafe.Pointer(dst))

    pdst.iSize = psrc.iSize
    pdst.iWidth = psrc.iWidth
    pdst.iHeight = psrc.iHeight
    pdst.iPLanes = psrc.iPLanes
    pdst.iBitCount = psrc.iBitCount
    pdst.iCompression = psrc.iCompression
    pdst.iSizeImage = psrc.iSizeImage
    pdst.iXPelsPerMeter = psrc.iXPelsPerMeter
    pdst.iYPelsPerMeter = psrc.iYPelsPerMeter
    pdst.iClrUsed = psrc.iClrUsed
    pdst.iClrImportant = psrc.iClrImportant

    return &amp;quot;copy infoHeader success&amp;quot;, nil
}

func readUint16(b []byte) uint16 {
    return uint16(b[0]) | uint16(b[1])&amp;lt;&amp;lt;8
}

func readUint32(b []byte) uint32 {
    return uint32(b[0]) | uint32(b[1])&amp;lt;&amp;lt;8 | uint32(b[2])&amp;lt;&amp;lt;16 | uint32(b[3])&amp;lt;&amp;lt;24
}

func readClipboard(filename string) (string, error) {
    const (
        fileHeaderLen = 14
        infoHeaderLen = 40
    )

    r, _, err := openClipboard.Call(0)
    if r == 0 {
        return &amp;quot;openClipboard&amp;quot;, err
    }
    defer closeClipboard.Call()

    // check whether clipboard data is dib format
    r, _, err = isClipboardFormatAvailable.Call(cfDib)
    if r == 0 {
        return &amp;quot;not Dib format&amp;quot;, err
    }

    h, _, err := getClipboardData.Call(cfDib)
    if r == 0 {
        return &amp;quot;getClipboardData&amp;quot;, err
    }

    // get dib data
    pdata, _, err := globalLock.Call(h)
    if pdata == 0 {
        return &amp;quot;writeToFile globalLock failed!&amp;quot;, err
    }

    // the first 40 bytes are bmp info header
    h2 := (*infoHeader)(unsafe.Pointer(pdata))

    fmt.Println(h2)

    // bmp file size should consist of fileheader 14 bytes, bmpinfoheader 40 bytes,
    // and pixel data size
    dataSize := h2.iSizeImage + fileHeaderLen + infoHeaderLen

    // check for raw compression data without sizeimage provided condition
    if h2.iSizeImage == 0 &amp;amp;&amp;amp; h2.iCompression == 0 {
        // width*bitcount should be 4 byte align
        iSizeImage := h2.iHeight * ((h2.iWidth*uint32(h2.iBitCount)/8 + 3) &amp;amp;^ 3)
        dataSize += iSizeImage
    }

    log.Println(&amp;quot;datasize: &amp;quot;, dataSize, h2.iHeight*((h2.iWidth*uint32(h2.iBitCount)/8+3)&amp;amp;^3))
    // data := make([]byte, dataSize)

    // var hdr *fileHeader
    data := new(bytes.Buffer)
    // hdr := (*bytes.Buffer)(unsafe.Pointer(&amp;amp;data[0]))
    binary.Write(data, binary.LittleEndian, uint16(&#39;B&#39;)|(uint16(&#39;M&#39;)&amp;lt;&amp;lt;8))

    // filesize
    binary.Write(data, binary.LittleEndian, uint32(dataSize))
    binary.Write(data, binary.LittleEndian, uint32(0))
    const sizeof_colorbar = 0

    // offset 
    binary.Write(data, binary.LittleEndian, uint32(fileHeaderLen+infoHeaderLen+sizeof_colorbar))
    log.Println(&amp;quot;fileHeader &amp;quot;, data.Bytes(), len(data.Bytes()))

    // log.Println(&amp;quot;header: &amp;quot;, hdr, data[:8])
    // log.Print(&amp;quot;bfOffBits &amp;quot;, hdr.bfOffBits)
    // copyInfoHdr(&amp;amp;data[fileHeaderLen], h2)
    j := 0
    for i := fileHeaderLen; i &amp;lt; int(dataSize); i++ {
        binary.Write(data, binary.LittleEndian, *(*byte)(unsafe.Pointer(pdata + uintptr(j))))
        j++
    }

    for i := 0; i &amp;lt; 12; i++ {
        // binary.Write(data, binary.LittleEndian, byte(0))
    }

    fmt.Println(data.Bytes()[:60])
    // fmt.Println(data.Bytes()[1196900:])

    saveAs(data, &amp;quot;testjpg.jpg&amp;quot;)

    return &amp;quot;success&amp;quot;, nil
}

func saveAs(dat *bytes.Buffer, filename string) (string, error) {
    // var buf bytes.Buffer
    // buf.Write(dat)
    // f, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE, 0755)
    f, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE, 0755)
    if err != nil {
        log.Fatal(err)
    }

    log.Println(&amp;quot;try decode&amp;quot;)
    original_image, err := bmp.Decode(dat)
    if err != nil {
        log.Fatal(err)
    }
    log.Println(&amp;quot;decode success&amp;quot;)

    err = jpeg.Encode(f, original_image, nil)
    if err != nil {
        log.Fatal(err)
    }

    if err := f.Close(); err != nil {
        log.Fatal(err)
    }
    fmt.Println(&amp;quot;write file %s success&amp;quot;, filename)
    return &amp;quot;succ&amp;quot;, nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>hugo setup</title>
      <link>http://blog912.cn/hugo/hugo_setup/</link>
      <pubDate>Sat, 11 Mar 2017 22:33:54 +0530</pubDate>
      
      <guid>http://blog912.cn/hugo/hugo_setup/</guid>
      <description>

&lt;h3 id=&#34;hugo-initial&#34;&gt;hugo initial&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugo-new-post&#34;&gt;hugo new post&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /path/to/mysite
hugo new post/hugo_setup.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugo-publish&#34;&gt;hugo publish&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo 
# it would produce static pages in public directory
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用fabric工具配置ssh免密码登录</title>
      <link>http://blog912.cn/python/fabric-set-ssh-passwdless/</link>
      <pubDate>Wed, 15 Feb 2017 08:36:54 +0530</pubDate>
      
      <guid>http://blog912.cn/python/fabric-set-ssh-passwdless/</guid>
      <description>

&lt;h3 id=&#34;must-setup-the-localhost-keygen&#34;&gt;must setup the localhost keygen&lt;/h3&gt;

&lt;p&gt;generate keys for localhost&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-passwdless-in-remote-servers&#34;&gt;setup passwdless in remote servers&lt;/h3&gt;

&lt;p&gt;the script set_pass.py is like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import *
from fabric.contrib.files import *


user = &#39;user&#39;
env.password = &#39;password&#39;

env.hosts=[]
for ip in range(232, 240):
    env.hosts.append(&#39;%s@192.146.156.%d&#39; % (user, ip))

def setpass():
        local(&amp;quot;rm -rf passwd_set/authorized_keys&amp;quot;)
        home = os.getenv(&amp;quot;HOME&amp;quot;)
        with open(&amp;quot;%s/.ssh/id_rsa.pub&amp;quot; % home, &amp;quot;r&amp;quot;) as fr:
                key = fr.read()
        get(&amp;quot;~/.ssh/*&amp;quot;, &amp;quot;passwd_set/.&amp;quot;)
        local(&amp;quot;touch passwd_set/authorized_keys&amp;quot;)
        exists1 = False
        with open(&amp;quot;passwd_set/authorized_keys&amp;quot;, &amp;quot;r&amp;quot;) as fr:
                if key in fr.read():
                        exists1 = True
        if not exists1:
                with open(&amp;quot;passwd_set/authorized_keys&amp;quot;, &amp;quot;a&amp;quot;) as fw:
                        fw.write(key)
                put(&amp;quot;passwd_set/authorized_keys&amp;quot;, &amp;quot;~/.ssh/&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the bash shell, could run the fabric to set servers passwdless in batch&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fab -f set_pass.py setpass
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/2/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/hugo/sublime_plugin_hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/hugo/sublime_plugin_hugo/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/hugo_sublime_plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/hugo_sublime_plugin/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/post/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/post/1/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/post/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/post/3/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/post/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/post/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/post/test2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/post/test2/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog912.cn/post/test3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog912.cn/post/test3/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>