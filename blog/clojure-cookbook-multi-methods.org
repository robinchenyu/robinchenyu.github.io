#+TITLE:       Clojure Cookbook:多重方法
#+AUTHOR:
#+EMAIL:       robin.chenyu@gmail.com
#+DATE:        2017-01-31 Tue
#+URI:         /blog/%y/%m/%d/clojure-cookbook-多重方法
#+KEYWORDS:    clojure, cookbook, multimethods
#+TAGS:        clojure, cookbook, multimethods
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Clojure中的多重方法定义

** 在clojure语言中的多重方法定义, 先看一个最简单的实现方式:
   #+BEGIN_SRC clojure
(defn area
  "计算多边形面积"
  [shape]
  (condp = (:type shape)
    :triangle (* (:base shape) (:height shape) (/ 1 2))
    :rectangle (* (:length shape) (:width shape))))

; 调用如下
(area {:type :triangle :base 2 :height 4})
; => 4

(area {:type :rectangle :length 2 :width 4})
; => 8
   #+END_SRC

   用上面的方法可以实现函数调用分发，但是area定义有些繁琐，利用lisp语言的灵活性，可以用宏把area函数精简。Clojure语言有已经实现好的defmulti和defmethod宏。
   #+BEGIN_SRC clojure
(defmulti area
  "计算多边形面积"
  :type)                                        ; [a]

(defmethod area :rectangle
[shape]
  (* (:length shape) (:width shape)))

(area {:type :rectangle :length 2 :width 4})
; => 8

;; 如果计算一个新类型面积
(area {:type :circle :radius 1})
;; -> IllegalArgumentException No method in multimethod `area` for
;;    dispatch value: :circle

(defmethod area :circle [shape]
  (* (. Math PI) (:radius shape) (:radius shape)))

(area {:type :circle :radius 1})
; => 3.141592653589793
   #+END_SRC

* a 在使用defmulti定义时使用的:type参数其实是函数，由于入参shape是一个字典，实际运行是(:type shape);这里也可以如下定义
  #+BEGIN_SRC clojure
  (defmulti area (fn [shape] (:type shape)))
  #+END_SRC
  同时，由于通过函数分发，增加了灵活性，defmulti是可以支持多参数分发
  [clojuredocs文档](https://clojuredocs.org/clojure.core/defmulti)
